// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v3.21.12
// source: socket.proto

package socket

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestType int32

const (
	RequestType_ACK             RequestType = 0
	RequestType_NACK            RequestType = 1
	RequestType_SetTCPServer    RequestType = 2
	RequestType_SetSerialServer RequestType = 3
	RequestType_AddSlave        RequestType = 4
	RequestType_RemoveSlave     RequestType = 5
	RequestType_StartServer     RequestType = 6
	RequestType_StopServer      RequestType = 7
	RequestType_SetTCPClient    RequestType = 8
	RequestType_SetSerialClient RequestType = 9
	RequestType_Connect         RequestType = 10
	RequestType_Disconnect      RequestType = 11
	RequestType_AddRelay        RequestType = 12
	RequestType_SetRelay        RequestType = 13
	RequestType_DeleteRelay     RequestType = 14
	RequestType_ReadRelay       RequestType = 15
	RequestType_WriteRelay      RequestType = 16
	RequestType_AddRegister     RequestType = 17
	RequestType_SetRegister     RequestType = 18
	RequestType_DeleteRegister  RequestType = 19
	RequestType_ReadRegister    RequestType = 20
	RequestType_WriteRegister   RequestType = 21
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0:  "ACK",
		1:  "NACK",
		2:  "SetTCPServer",
		3:  "SetSerialServer",
		4:  "AddSlave",
		5:  "RemoveSlave",
		6:  "StartServer",
		7:  "StopServer",
		8:  "SetTCPClient",
		9:  "SetSerialClient",
		10: "Connect",
		11: "Disconnect",
		12: "AddRelay",
		13: "SetRelay",
		14: "DeleteRelay",
		15: "ReadRelay",
		16: "WriteRelay",
		17: "AddRegister",
		18: "SetRegister",
		19: "DeleteRegister",
		20: "ReadRegister",
		21: "WriteRegister",
	}
	RequestType_value = map[string]int32{
		"ACK":             0,
		"NACK":            1,
		"SetTCPServer":    2,
		"SetSerialServer": 3,
		"AddSlave":        4,
		"RemoveSlave":     5,
		"StartServer":     6,
		"StopServer":      7,
		"SetTCPClient":    8,
		"SetSerialClient": 9,
		"Connect":         10,
		"Disconnect":      11,
		"AddRelay":        12,
		"SetRelay":        13,
		"DeleteRelay":     14,
		"ReadRelay":       15,
		"WriteRelay":      16,
		"AddRegister":     17,
		"SetRegister":     18,
		"DeleteRegister":  19,
		"ReadRegister":    20,
		"WriteRegister":   21,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_socket_proto_enumTypes[0].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_socket_proto_enumTypes[0]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_socket_proto_rawDescGZIP(), []int{0}
}

type Header struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          RequestType            `protobuf:"varint,1,opt,name=type,proto3,enum=socket.RequestType" json:"type,omitempty"`
	Length        uint64                 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_socket_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_socket_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_socket_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetType() RequestType {
	if x != nil {
		return x.Type
	}
	return RequestType_ACK
}

func (x *Header) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Header) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TCPServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	UseTls        bool                   `protobuf:"varint,3,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
	CertFile      string                 `protobuf:"bytes,4,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	KeyFile       string                 `protobuf:"bytes,5,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	CaFile        string                 `protobuf:"bytes,6,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TCPServerRequest) Reset() {
	*x = TCPServerRequest{}
	mi := &file_socket_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPServerRequest) ProtoMessage() {}

func (x *TCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPServerRequest.ProtoReflect.Descriptor instead.
func (*TCPServerRequest) Descriptor() ([]byte, []int) {
	return file_socket_proto_rawDescGZIP(), []int{1}
}

func (x *TCPServerRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TCPServerRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TCPServerRequest) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *TCPServerRequest) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *TCPServerRequest) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *TCPServerRequest) GetCaFile() string {
	if x != nil {
		return x.CaFile
	}
	return ""
}

type SerialServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          string                 `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	Baudrate      int32                  `protobuf:"varint,2,opt,name=baudrate,proto3" json:"baudrate,omitempty"`
	Databits      uint32                 `protobuf:"varint,3,opt,name=databits,proto3" json:"databits,omitempty"`
	Parity        uint32                 `protobuf:"varint,4,opt,name=parity,proto3" json:"parity,omitempty"`
	Stopbits      uint32                 `protobuf:"varint,5,opt,name=stopbits,proto3" json:"stopbits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerialServerRequest) Reset() {
	*x = SerialServerRequest{}
	mi := &file_socket_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerialServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialServerRequest) ProtoMessage() {}

func (x *SerialServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialServerRequest.ProtoReflect.Descriptor instead.
func (*SerialServerRequest) Descriptor() ([]byte, []int) {
	return file_socket_proto_rawDescGZIP(), []int{2}
}

func (x *SerialServerRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *SerialServerRequest) GetBaudrate() int32 {
	if x != nil {
		return x.Baudrate
	}
	return 0
}

func (x *SerialServerRequest) GetDatabits() uint32 {
	if x != nil {
		return x.Databits
	}
	return 0
}

func (x *SerialServerRequest) GetParity() uint32 {
	if x != nil {
		return x.Parity
	}
	return 0
}

func (x *SerialServerRequest) GetStopbits() uint32 {
	if x != nil {
		return x.Stopbits
	}
	return 0
}

type TCPClientRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	UseTls        bool                   `protobuf:"varint,3,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
	CertFile      string                 `protobuf:"bytes,6,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	KeyFile       string                 `protobuf:"bytes,7,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	CaFile        string                 `protobuf:"bytes,8,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TCPClientRequest) Reset() {
	*x = TCPClientRequest{}
	mi := &file_socket_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TCPClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPClientRequest) ProtoMessage() {}

func (x *TCPClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPClientRequest.ProtoReflect.Descriptor instead.
func (*TCPClientRequest) Descriptor() ([]byte, []int) {
	return file_socket_proto_rawDescGZIP(), []int{3}
}

func (x *TCPClientRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TCPClientRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TCPClientRequest) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *TCPClientRequest) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *TCPClientRequest) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *TCPClientRequest) GetCaFile() string {
	if x != nil {
		return x.CaFile
	}
	return ""
}

type SerialClientRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          string                 `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	Baudrate      int32                  `protobuf:"varint,2,opt,name=baudrate,proto3" json:"baudrate,omitempty"`
	Databits      uint32                 `protobuf:"varint,3,opt,name=databits,proto3" json:"databits,omitempty"`
	Parity        uint32                 `protobuf:"varint,4,opt,name=parity,proto3" json:"parity,omitempty"`
	Stopbits      uint32                 `protobuf:"varint,5,opt,name=stopbits,proto3" json:"stopbits,omitempty"`
	BufferTime    uint32                 `protobuf:"varint,6,opt,name=buffer_time,json=bufferTime,proto3" json:"buffer_time,omitempty"`
	Timeout       uint32                 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SerialClientRequest) Reset() {
	*x = SerialClientRequest{}
	mi := &file_socket_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SerialClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialClientRequest) ProtoMessage() {}

func (x *SerialClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_socket_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialClientRequest.ProtoReflect.Descriptor instead.
func (*SerialClientRequest) Descriptor() ([]byte, []int) {
	return file_socket_proto_rawDescGZIP(), []int{4}
}

func (x *SerialClientRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *SerialClientRequest) GetBaudrate() int32 {
	if x != nil {
		return x.Baudrate
	}
	return 0
}

func (x *SerialClientRequest) GetDatabits() uint32 {
	if x != nil {
		return x.Databits
	}
	return 0
}

func (x *SerialClientRequest) GetParity() uint32 {
	if x != nil {
		return x.Parity
	}
	return 0
}

func (x *SerialClientRequest) GetStopbits() uint32 {
	if x != nil {
		return x.Stopbits
	}
	return 0
}

func (x *SerialClientRequest) GetBufferTime() uint32 {
	if x != nil {
		return x.BufferTime
	}
	return 0
}

func (x *SerialClientRequest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type Slave struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnitId        uint32                 `protobuf:"varint,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Slave) Reset() {
	*x = Slave{}
	mi := &file_socket_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Slave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slave) ProtoMessage() {}

func (x *Slave) ProtoReflect() protoreflect.Message {
	mi := &file_socket_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slave.ProtoReflect.Descriptor instead.
func (*Slave) Descriptor() ([]byte, []int) {
	return file_socket_proto_rawDescGZIP(), []int{5}
}

func (x *Slave) GetUnitId() uint32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

type Relay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slave         *Slave                 `protobuf:"bytes,1,opt,name=slave,proto3" json:"slave,omitempty"`
	Address       uint32                 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`
	Count         uint32                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Values        []bool                 `protobuf:"varint,4,rep,packed,name=values,proto3" json:"values,omitempty"`
	Writable      bool                   `protobuf:"varint,5,opt,name=writable,proto3" json:"writable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Relay) Reset() {
	*x = Relay{}
	mi := &file_socket_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Relay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relay) ProtoMessage() {}

func (x *Relay) ProtoReflect() protoreflect.Message {
	mi := &file_socket_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relay.ProtoReflect.Descriptor instead.
func (*Relay) Descriptor() ([]byte, []int) {
	return file_socket_proto_rawDescGZIP(), []int{6}
}

func (x *Relay) GetSlave() *Slave {
	if x != nil {
		return x.Slave
	}
	return nil
}

func (x *Relay) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *Relay) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Relay) GetValues() []bool {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Relay) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

type Register struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slave         *Slave                 `protobuf:"bytes,1,opt,name=slave,proto3" json:"slave,omitempty"`
	Address       uint32                 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`
	Count         uint32                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Values        [][]byte               `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	Writable      bool                   `protobuf:"varint,5,opt,name=writable,proto3" json:"writable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Register) Reset() {
	*x = Register{}
	mi := &file_socket_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Register) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Register) ProtoMessage() {}

func (x *Register) ProtoReflect() protoreflect.Message {
	mi := &file_socket_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Register.ProtoReflect.Descriptor instead.
func (*Register) Descriptor() ([]byte, []int) {
	return file_socket_proto_rawDescGZIP(), []int{7}
}

func (x *Register) GetSlave() *Slave {
	if x != nil {
		return x.Slave
	}
	return nil
}

func (x *Register) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *Register) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Register) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Register) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

var File_socket_proto protoreflect.FileDescriptor

var file_socket_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x5f, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x54, 0x43, 0x50, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x95,
	0x01, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61,
	0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61,
	0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x69,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x69,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x62, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x62, 0x69, 0x74, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x54, 0x43, 0x50, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xd0, 0x01,
	0x0a, 0x13, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x75,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x75,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x69, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x69, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x62, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x62, 0x69, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x20, 0x0a, 0x05, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x05,
	0x73, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x76,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x08, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x72, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x6c, 0x61, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2a, 0xf2, 0x02, 0x0a, 0x0b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x43, 0x4b, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x65, 0x74, 0x54, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x53, 0x6c, 0x61, 0x76,
	0x65, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6c, 0x61,
	0x76, 0x65, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x54, 0x43, 0x50, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x14, 0x12, 0x11, 0x0a,
	0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x15,
	0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_socket_proto_rawDescOnce sync.Once
	file_socket_proto_rawDescData = file_socket_proto_rawDesc
)

func file_socket_proto_rawDescGZIP() []byte {
	file_socket_proto_rawDescOnce.Do(func() {
		file_socket_proto_rawDescData = protoimpl.X.CompressGZIP(file_socket_proto_rawDescData)
	})
	return file_socket_proto_rawDescData
}

var file_socket_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_socket_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_socket_proto_goTypes = []any{
	(RequestType)(0),            // 0: socket.RequestType
	(*Header)(nil),              // 1: socket.Header
	(*TCPServerRequest)(nil),    // 2: socket.TCPServerRequest
	(*SerialServerRequest)(nil), // 3: socket.SerialServerRequest
	(*TCPClientRequest)(nil),    // 4: socket.TCPClientRequest
	(*SerialClientRequest)(nil), // 5: socket.SerialClientRequest
	(*Slave)(nil),               // 6: socket.Slave
	(*Relay)(nil),               // 7: socket.Relay
	(*Register)(nil),            // 8: socket.Register
}
var file_socket_proto_depIdxs = []int32{
	0, // 0: socket.Header.type:type_name -> socket.RequestType
	6, // 1: socket.Relay.slave:type_name -> socket.Slave
	6, // 2: socket.Register.slave:type_name -> socket.Slave
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_socket_proto_init() }
func file_socket_proto_init() {
	if File_socket_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_socket_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_socket_proto_goTypes,
		DependencyIndexes: file_socket_proto_depIdxs,
		EnumInfos:         file_socket_proto_enumTypes,
		MessageInfos:      file_socket_proto_msgTypes,
	}.Build()
	File_socket_proto = out.File
	file_socket_proto_rawDesc = nil
	file_socket_proto_goTypes = nil
	file_socket_proto_depIdxs = nil
}
