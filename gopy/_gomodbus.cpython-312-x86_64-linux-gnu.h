/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/ulfaric/gomodbus/gopy */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "gomodbus.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long int handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long int handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: []bool ---
//
extern long long int Slice_bool_CTor();
extern GoInt Slice_bool_len(long long int handle);
extern char Slice_bool_elem(long long int handle, GoInt _idx);
extern long long int Slice_bool_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long int handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long int Slice_byte_CTor();
extern GoInt Slice_byte_len(long long int handle);
extern char Slice_byte_elem(long long int handle, GoInt _idx);
extern long long int Slice_byte_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long int handle, char _vl);
extern long long int Slice_byte_from_bytes(PyObject* o);
extern PyObject* Slice_byte_to_bytes(long long int handle);

// --- wrapping slice: []error ---
//
extern long long int Slice_error_CTor();
extern GoInt Slice_error_len(long long int handle);
extern char* Slice_error_elem(long long int handle, GoInt _idx);
extern long long int Slice_error_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long int handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long int Slice_float32_CTor();
extern GoInt Slice_float32_len(long long int handle);
extern float Slice_float32_elem(long long int handle, GoInt _idx);
extern long long int Slice_float32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long int handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long int handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long int Slice_float64_CTor();
extern GoInt Slice_float64_len(long long int handle);
extern double Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long int handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long int handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long int Slice_int_CTor();
extern GoInt Slice_int_len(long long int handle);
extern long long int Slice_int_elem(long long int handle, GoInt _idx);
extern long long int Slice_int_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int_append(long long int handle, long long int _vl);

// --- wrapping slice: []int16 ---
//
extern long long int Slice_int16_CTor();
extern GoInt Slice_int16_len(long long int handle);
extern short int Slice_int16_elem(long long int handle, GoInt _idx);
extern long long int Slice_int16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long int handle, GoInt _idx, short int _vl);
extern void Slice_int16_append(long long int handle, short int _vl);

// --- wrapping slice: []int32 ---
//
extern long long int Slice_int32_CTor();
extern GoInt Slice_int32_len(long long int handle);
extern long int Slice_int32_elem(long long int handle, GoInt _idx);
extern long long int Slice_int32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_int32_append(long long int handle, long int _vl);

// --- wrapping slice: []int64 ---
//
extern long long int Slice_int64_CTor();
extern GoInt Slice_int64_len(long long int handle);
extern long long int Slice_int64_elem(long long int handle, GoInt _idx);
extern long long int Slice_int64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int64_append(long long int handle, long long int _vl);

// --- wrapping slice: []int8 ---
//
extern long long int Slice_int8_CTor();
extern GoInt Slice_int8_len(long long int handle);
extern char Slice_int8_elem(long long int handle, GoInt _idx);
extern long long int Slice_int8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long int handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long int Slice_rune_CTor();
extern GoInt Slice_rune_len(long long int handle);
extern long int Slice_rune_elem(long long int handle, GoInt _idx);
extern long long int Slice_rune_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_rune_append(long long int handle, long int _vl);

// --- wrapping slice: []string ---
//
extern long long int Slice_string_CTor();
extern GoInt Slice_string_len(long long int handle);
extern char* Slice_string_elem(long long int handle, GoInt _idx);
extern long long int Slice_string_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long int handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long int Slice_uint_CTor();
extern GoInt Slice_uint_len(long long int handle);
extern long long unsigned int Slice_uint_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint16 ---
//
extern long long int Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long int handle);
extern short unsigned int Slice_uint16_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long int handle, GoInt _idx, short unsigned int _vl);
extern void Slice_uint16_append(long long int handle, short unsigned int _vl);

// --- wrapping slice: []uint32 ---
//
extern long long int Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long int handle);
extern long unsigned int Slice_uint32_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long int handle, GoInt _idx, long unsigned int _vl);
extern void Slice_uint32_append(long long int handle, long unsigned int _vl);

// --- wrapping slice: []uint64 ---
//
extern long long int Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long int handle);
extern long long unsigned int Slice_uint64_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint64_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint8 ---
//
extern long long int Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long int handle);
extern unsigned char Slice_uint8_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long int handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long int handle, unsigned char _vl);

// --- wrapping slice: [][]byte ---
//
extern long long int Slice_Slice_byte_CTor();
extern GoInt Slice_Slice_byte_len(long long int handle);
extern long long int Slice_Slice_byte_elem(long long int handle, GoInt _idx);
extern long long int Slice_Slice_byte_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_byte_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_Slice_byte_append(long long int handle, long long int _vl);

// --- wrapping slice: []zap.Option ---
//
extern long long int Slice_zap_Option_CTor();
extern GoInt Slice_zap_Option_len(long long int handle);
extern long long int Slice_zap_Option_elem(long long int handle, GoInt _idx);
extern long long int Slice_zap_Option_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_zap_Option_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_zap_Option_append(long long int handle, long long int _vl);

// --- wrapping slice: []zapcore.Field ---
//
extern long long int Slice_zapcore_Field_CTor();
extern GoInt Slice_zapcore_Field_len(long long int handle);
extern long long int Slice_zapcore_Field_elem(long long int handle, GoInt _idx);
extern long long int Slice_zapcore_Field_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_zapcore_Field_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_zapcore_Field_append(long long int handle, long long int _vl);

// --- wrapping slice: []interface{} ---
//
extern long long int Slice_interface__CTor();
extern GoInt Slice_interface__len(long long int handle);
extern char* Slice_interface__elem(long long int handle, GoInt _idx);
extern long long int Slice_interface__subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_interface__set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_interface__append(long long int handle, char* _vl);

// --- wrapping map: map[byte]*gomodbus.Slave ---
//
extern long long int Map_byte_Ptr_gomodbus_Slave_CTor();
extern GoInt Map_byte_Ptr_gomodbus_Slave_len(long long int handle);
extern long long int Map_byte_Ptr_gomodbus_Slave_elem(long long int handle, char _ky);
extern char Map_byte_Ptr_gomodbus_Slave_contains(long long int handle, char _ky);
extern void Map_byte_Ptr_gomodbus_Slave_set(long long int handle, char _ky, long long int _vl);
extern void Map_byte_Ptr_gomodbus_Slave_delete(long long int handle, char _ky);
extern long long int Map_byte_Ptr_gomodbus_Slave_keys(long long int handle);

// --- wrapping map: map[byte]string ---
//
extern long long int Map_byte_string_CTor();
extern GoInt Map_byte_string_len(long long int handle);
extern char* Map_byte_string_elem(long long int handle, char _ky);
extern char Map_byte_string_contains(long long int handle, char _ky);
extern void Map_byte_string_set(long long int handle, char _ky, char* _vl);
extern void Map_byte_string_delete(long long int handle, char _ky);
extern long long int Map_byte_string_keys(long long int handle);

// --- wrapping map: map[uint16][]byte ---
//
extern long long int Map_uint16_Slice_byte_CTor();
extern GoInt Map_uint16_Slice_byte_len(long long int handle);
extern long long int Map_uint16_Slice_byte_elem(long long int handle, short unsigned int _ky);
extern char Map_uint16_Slice_byte_contains(long long int handle, short unsigned int _ky);
extern void Map_uint16_Slice_byte_set(long long int handle, short unsigned int _ky, long long int _vl);
extern void Map_uint16_Slice_byte_delete(long long int handle, short unsigned int _ky);
extern long long int Map_uint16_Slice_byte_keys(long long int handle);

// --- wrapping map: map[uint16]bool ---
//
extern long long int Map_uint16_bool_CTor();
extern GoInt Map_uint16_bool_len(long long int handle);
extern char Map_uint16_bool_elem(long long int handle, short unsigned int _ky);
extern char Map_uint16_bool_contains(long long int handle, short unsigned int _ky);
extern void Map_uint16_bool_set(long long int handle, short unsigned int _ky, char _vl);
extern void Map_uint16_bool_delete(long long int handle, short unsigned int _ky);
extern long long int Map_uint16_bool_keys(long long int handle);

// ---- Global Variables: can only use functions to access ---
//
extern long long int gomodbus_Logger();
extern void gomodbus_Set_Logger(long long int val);
extern long long int gomodbus_ModbusException();
extern void gomodbus_Set_ModbusException(long long int val);
extern char* gomodbus_Client_Connect(long long int _handle);
extern char* gomodbus_Client_Disconnect(long long int _handle);
extern long long int gomodbus_Client_ReceiveResponse(long long int _handle);
extern char* gomodbus_Client_SendRequest(long long int _handle, char unitID, long long int pduBytes);
extern void gomodbus_Server_AddSlave(long long int _handle, char unitID, char goRun);
extern long long int gomodbus_Server_GetSlave(long long int _handle, char unitID);
extern void gomodbus_Server_RemoveSlave(long long int _handle, char unitID, char goRun);
extern char* gomodbus_Server_Start(long long int _handle);
extern char* gomodbus_Server_Stop(long long int _handle);

// --- wrapping struct: gomodbus.TCPClient ---
//
extern long long int gomodbus_TCPClient_CTor();
extern char* gomodbus_TCPClient_Host_Get(long long int handle);
extern void gomodbus_TCPClient_Host_Set(long long int handle, char* val);
extern long long int gomodbus_TCPClient_Port_Get(long long int handle);
extern void gomodbus_TCPClient_Port_Set(long long int handle, long long int val);
extern char gomodbus_TCPClient_UseTLS_Get(long long int handle);
extern void gomodbus_TCPClient_UseTLS_Set(long long int handle, char val);
extern char* gomodbus_TCPClient_CertFile_Get(long long int handle);
extern void gomodbus_TCPClient_CertFile_Set(long long int handle, char* val);
extern char* gomodbus_TCPClient_KeyFile_Get(long long int handle);
extern void gomodbus_TCPClient_KeyFile_Set(long long int handle, char* val);
extern char* gomodbus_TCPClient_CAFile_Get(long long int handle);
extern void gomodbus_TCPClient_CAFile_Set(long long int handle, char* val);
extern char* gomodbus_TCPClient_Connect(long long int _handle);
extern char* gomodbus_TCPClient_Disconnect(long long int _handle);
extern char* gomodbus_TCPClient_SendRequest(long long int _handle, char unitID, long long int pduBytes);
extern long long int gomodbus_TCPClient_ReceiveResponse(long long int _handle);

// --- wrapping struct: gomodbus.PDUErrorResponse ---
//
extern long long int gomodbus_PDUErrorResponse_CTor();
extern char gomodbus_PDUErrorResponse_FunctionCode_Get(long long int handle);
extern void gomodbus_PDUErrorResponse_FunctionCode_Set(long long int handle, char val);
extern char gomodbus_PDUErrorResponse_ExceptionCode_Get(long long int handle);
extern void gomodbus_PDUErrorResponse_ExceptionCode_Set(long long int handle, char val);
extern long long int gomodbus_PDUErrorResponse_ToBytes(long long int _handle);
extern char* gomodbus_PDUErrorResponse_FromBytes(long long int _handle, long long int data);

// --- wrapping struct: gomodbus.PDUWriteMultipleCoils ---
//
extern long long int gomodbus_PDUWriteMultipleCoils_CTor();
extern char gomodbus_PDUWriteMultipleCoils_FunctionCode_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleCoils_FunctionCode_Set(long long int handle, char val);
extern short unsigned int gomodbus_PDUWriteMultipleCoils_StartingAddress_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleCoils_StartingAddress_Set(long long int handle, short unsigned int val);
extern short unsigned int gomodbus_PDUWriteMultipleCoils_Quantity_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleCoils_Quantity_Set(long long int handle, short unsigned int val);
extern char gomodbus_PDUWriteMultipleCoils_ByteCount_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleCoils_ByteCount_Set(long long int handle, char val);
extern long long int gomodbus_PDUWriteMultipleCoils_Values_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleCoils_Values_Set(long long int handle, long long int val);
extern long long int gomodbus_PDUWriteMultipleCoils_ToBytes(long long int _handle);
extern char* gomodbus_PDUWriteMultipleCoils_FromBytes(long long int _handle, long long int data);

// --- wrapping struct: gomodbus.PDUWriteMultipleRegistersResponse ---
//
extern long long int gomodbus_PDUWriteMultipleRegistersResponse_CTor();
extern char gomodbus_PDUWriteMultipleRegistersResponse_FunctionCode_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleRegistersResponse_FunctionCode_Set(long long int handle, char val);
extern short unsigned int gomodbus_PDUWriteMultipleRegistersResponse_Address_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleRegistersResponse_Address_Set(long long int handle, short unsigned int val);
extern short unsigned int gomodbus_PDUWriteMultipleRegistersResponse_Quantity_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleRegistersResponse_Quantity_Set(long long int handle, short unsigned int val);
extern long long int gomodbus_PDUWriteMultipleRegistersResponse_ToBytes(long long int _handle);
extern char* gomodbus_PDUWriteMultipleRegistersResponse_FromBytes(long long int _handle, long long int data);

// --- wrapping struct: gomodbus.PDUWriteSingleRegister ---
//
extern long long int gomodbus_PDUWriteSingleRegister_CTor();
extern char gomodbus_PDUWriteSingleRegister_FunctionCode_Get(long long int handle);
extern void gomodbus_PDUWriteSingleRegister_FunctionCode_Set(long long int handle, char val);
extern short unsigned int gomodbus_PDUWriteSingleRegister_Address_Get(long long int handle);
extern void gomodbus_PDUWriteSingleRegister_Address_Set(long long int handle, short unsigned int val);
extern long long int gomodbus_PDUWriteSingleRegister_Value_Get(long long int handle);
extern void gomodbus_PDUWriteSingleRegister_Value_Set(long long int handle, long long int val);
extern long long int gomodbus_PDUWriteSingleRegister_ToBytes(long long int _handle);
extern char* gomodbus_PDUWriteSingleRegister_FromBytes(long long int _handle, long long int data);

// --- wrapping struct: gomodbus.Slave ---
//
extern long long int gomodbus_Slave_CTor();
extern long long int gomodbus_Slave_Coils_Get(long long int handle);
extern void gomodbus_Slave_Coils_Set(long long int handle, long long int val);
extern long long int gomodbus_Slave_DiscreteInputs_Get(long long int handle);
extern void gomodbus_Slave_DiscreteInputs_Set(long long int handle, long long int val);
extern long long int gomodbus_Slave_HoldingRegisters_Get(long long int handle);
extern void gomodbus_Slave_HoldingRegisters_Set(long long int handle, long long int val);
extern long long int gomodbus_Slave_InputRegisters_Get(long long int handle);
extern void gomodbus_Slave_InputRegisters_Set(long long int handle, long long int val);
extern void gomodbus_Slave_AddCoils(long long int _handle, short unsigned int address, long long int values, char goRun);
extern void gomodbus_Slave_DeleteCoils(long long int _handle, long long int addresses, char goRun);
extern void gomodbus_Slave_AddDiscreteInputs(long long int _handle, short unsigned int address, long long int values, char goRun);
extern void gomodbus_Slave_DeleteDiscreteInputs(long long int _handle, long long int addresses, char goRun);
extern void gomodbus_Slave_AddHoldingRegisters(long long int _handle, short unsigned int address, long long int values, char goRun);
extern void gomodbus_Slave_DeleteHoldingRegisters(long long int _handle, long long int addresses, char goRun);
extern void gomodbus_Slave_AddInputRegisters(long long int _handle, short unsigned int address, long long int values, char goRun);
extern void gomodbus_Slave_DeleteInputRegisters(long long int _handle, long long int addresses, char goRun);

// --- wrapping struct: gomodbus.CustomColorEncoder ---
//
extern long long int gomodbus_CustomColorEncoder_CTor();
extern long long int gomodbus_CustomColorEncoder_EncodeEntry(long long int _handle, long long int entry, long long int fields);

// --- wrapping struct: gomodbus.PDUReadResponse ---
//
extern long long int gomodbus_PDUReadResponse_CTor();
extern char gomodbus_PDUReadResponse_FunctionCode_Get(long long int handle);
extern void gomodbus_PDUReadResponse_FunctionCode_Set(long long int handle, char val);
extern char gomodbus_PDUReadResponse_ByteCount_Get(long long int handle);
extern void gomodbus_PDUReadResponse_ByteCount_Set(long long int handle, char val);
extern long long int gomodbus_PDUReadResponse_Data_Get(long long int handle);
extern void gomodbus_PDUReadResponse_Data_Set(long long int handle, long long int val);
extern long long int gomodbus_PDUReadResponse_ToBytes(long long int _handle);
extern char* gomodbus_PDUReadResponse_FromBytes(long long int _handle, long long int data);

// --- wrapping struct: gomodbus.PDUWriteSingleCoil ---
//
extern long long int gomodbus_PDUWriteSingleCoil_CTor();
extern char gomodbus_PDUWriteSingleCoil_FunctionCode_Get(long long int handle);
extern void gomodbus_PDUWriteSingleCoil_FunctionCode_Set(long long int handle, char val);
extern short unsigned int gomodbus_PDUWriteSingleCoil_Address_Get(long long int handle);
extern void gomodbus_PDUWriteSingleCoil_Address_Set(long long int handle, short unsigned int val);
extern short unsigned int gomodbus_PDUWriteSingleCoil_Value_Get(long long int handle);
extern void gomodbus_PDUWriteSingleCoil_Value_Set(long long int handle, short unsigned int val);
extern long long int gomodbus_PDUWriteSingleCoil_ToBytes(long long int _handle);
extern char* gomodbus_PDUWriteSingleCoil_FromBytes(long long int _handle, long long int data);

// --- wrapping struct: gomodbus.SerialClient ---
//
extern long long int gomodbus_SerialClient_CTor();
extern char* gomodbus_SerialClient_Port_Get(long long int handle);
extern void gomodbus_SerialClient_Port_Set(long long int handle, char* val);
extern long long int gomodbus_SerialClient_BaudRate_Get(long long int handle);
extern void gomodbus_SerialClient_BaudRate_Set(long long int handle, long long int val);
extern char gomodbus_SerialClient_DataBits_Get(long long int handle);
extern void gomodbus_SerialClient_DataBits_Set(long long int handle, char val);
extern char gomodbus_SerialClient_Parity_Get(long long int handle);
extern void gomodbus_SerialClient_Parity_Set(long long int handle, char val);
extern char gomodbus_SerialClient_StopBits_Get(long long int handle);
extern void gomodbus_SerialClient_StopBits_Set(long long int handle, char val);
extern char* gomodbus_SerialClient_Connect(long long int _handle);
extern char* gomodbus_SerialClient_Disconnect(long long int _handle);
extern char* gomodbus_SerialClient_SendRequest(long long int _handle, char unitID, long long int pduBytes);
extern long long int gomodbus_SerialClient_ReceiveResponse(long long int _handle);

// --- wrapping struct: gomodbus.PDUWriteMultipleRegisters ---
//
extern long long int gomodbus_PDUWriteMultipleRegisters_CTor();
extern char gomodbus_PDUWriteMultipleRegisters_FunctionCode_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleRegisters_FunctionCode_Set(long long int handle, char val);
extern short unsigned int gomodbus_PDUWriteMultipleRegisters_StartingAddress_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleRegisters_StartingAddress_Set(long long int handle, short unsigned int val);
extern short unsigned int gomodbus_PDUWriteMultipleRegisters_Quantity_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleRegisters_Quantity_Set(long long int handle, short unsigned int val);
extern char gomodbus_PDUWriteMultipleRegisters_ByteCount_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleRegisters_ByteCount_Set(long long int handle, char val);
extern long long int gomodbus_PDUWriteMultipleRegisters_Values_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleRegisters_Values_Set(long long int handle, long long int val);
extern long long int gomodbus_PDUWriteMultipleRegisters_ToBytes(long long int _handle);
extern char* gomodbus_PDUWriteMultipleRegisters_FromBytes(long long int _handle, long long int data);

// --- wrapping struct: gomodbus.PDUWriteSingleCoilResponse ---
//
extern long long int gomodbus_PDUWriteSingleCoilResponse_CTor();
extern char gomodbus_PDUWriteSingleCoilResponse_FunctionCode_Get(long long int handle);
extern void gomodbus_PDUWriteSingleCoilResponse_FunctionCode_Set(long long int handle, char val);
extern short unsigned int gomodbus_PDUWriteSingleCoilResponse_Address_Get(long long int handle);
extern void gomodbus_PDUWriteSingleCoilResponse_Address_Set(long long int handle, short unsigned int val);
extern char gomodbus_PDUWriteSingleCoilResponse_Value_Get(long long int handle);
extern void gomodbus_PDUWriteSingleCoilResponse_Value_Set(long long int handle, char val);
extern long long int gomodbus_PDUWriteSingleCoilResponse_ToBytes(long long int _handle);
extern char* gomodbus_PDUWriteSingleCoilResponse_FromBytes(long long int _handle, long long int data);

// --- wrapping struct: gomodbus.TCPADU ---
//
extern long long int gomodbus_TCPADU_CTor();
extern short unsigned int gomodbus_TCPADU_TransactionID_Get(long long int handle);
extern void gomodbus_TCPADU_TransactionID_Set(long long int handle, short unsigned int val);
extern short unsigned int gomodbus_TCPADU_ProtocolID_Get(long long int handle);
extern void gomodbus_TCPADU_ProtocolID_Set(long long int handle, short unsigned int val);
extern short unsigned int gomodbus_TCPADU_Length_Get(long long int handle);
extern void gomodbus_TCPADU_Length_Set(long long int handle, short unsigned int val);
extern char gomodbus_TCPADU_UnitID_Get(long long int handle);
extern void gomodbus_TCPADU_UnitID_Set(long long int handle, char val);
extern long long int gomodbus_TCPADU_PDU_Get(long long int handle);
extern void gomodbus_TCPADU_PDU_Set(long long int handle, long long int val);
extern long long int gomodbus_TCPADU_ToBytes(long long int _handle);
extern char* gomodbus_TCPADU_FromBytes(long long int _handle, long long int data);

// --- wrapping struct: gomodbus.SerialServer ---
//
extern long long int gomodbus_SerialServer_CTor();
extern char* gomodbus_SerialServer_Port_Get(long long int handle);
extern void gomodbus_SerialServer_Port_Set(long long int handle, char* val);
extern long long int gomodbus_SerialServer_BaudRate_Get(long long int handle);
extern void gomodbus_SerialServer_BaudRate_Set(long long int handle, long long int val);
extern char gomodbus_SerialServer_DataBits_Get(long long int handle);
extern void gomodbus_SerialServer_DataBits_Set(long long int handle, char val);
extern char gomodbus_SerialServer_Parity_Get(long long int handle);
extern void gomodbus_SerialServer_Parity_Set(long long int handle, char val);
extern char gomodbus_SerialServer_StopBits_Get(long long int handle);
extern void gomodbus_SerialServer_StopBits_Set(long long int handle, char val);
extern long long int gomodbus_SerialServer_Slaves_Get(long long int handle);
extern void gomodbus_SerialServer_Slaves_Set(long long int handle, long long int val);
extern void gomodbus_SerialServer_AddSlave(long long int _handle, char unitID, char goRun);
extern long long int gomodbus_SerialServer_GetSlave(long long int _handle, char unitID);
extern void gomodbus_SerialServer_RemoveSlave(long long int _handle, char unitID, char goRun);
extern char* gomodbus_SerialServer_Start(long long int _handle);
extern char* gomodbus_SerialServer_Stop(long long int _handle);

// --- wrapping struct: gomodbus.TCPServer ---
//
extern long long int gomodbus_TCPServer_CTor();
extern char* gomodbus_TCPServer_Host_Get(long long int handle);
extern void gomodbus_TCPServer_Host_Set(long long int handle, char* val);
extern long int gomodbus_TCPServer_Port_Get(long long int handle);
extern void gomodbus_TCPServer_Port_Set(long long int handle, long int val);
extern long long int gomodbus_TCPServer_Slaves_Get(long long int handle);
extern void gomodbus_TCPServer_Slaves_Set(long long int handle, long long int val);
extern char gomodbus_TCPServer_UseTLS_Get(long long int handle);
extern void gomodbus_TCPServer_UseTLS_Set(long long int handle, char val);
extern char* gomodbus_TCPServer_CertFile_Get(long long int handle);
extern void gomodbus_TCPServer_CertFile_Set(long long int handle, char* val);
extern char* gomodbus_TCPServer_KeyFile_Get(long long int handle);
extern void gomodbus_TCPServer_KeyFile_Set(long long int handle, char* val);
extern char* gomodbus_TCPServer_CAFile_Get(long long int handle);
extern void gomodbus_TCPServer_CAFile_Set(long long int handle, char* val);
extern void gomodbus_TCPServer_AddSlave(long long int _handle, char unitID, char goRun);
extern long long int gomodbus_TCPServer_GetSlave(long long int _handle, char unitID);
extern void gomodbus_TCPServer_RemoveSlave(long long int _handle, char unitID, char goRun);
extern char* gomodbus_TCPServer_Start(long long int _handle);
extern char* gomodbus_TCPServer_Stop(long long int _handle);

// --- wrapping struct: gomodbus.PDURead ---
//
extern long long int gomodbus_PDURead_CTor();
extern char gomodbus_PDURead_FunctionCode_Get(long long int handle);
extern void gomodbus_PDURead_FunctionCode_Set(long long int handle, char val);
extern short unsigned int gomodbus_PDURead_StartingAddress_Get(long long int handle);
extern void gomodbus_PDURead_StartingAddress_Set(long long int handle, short unsigned int val);
extern short unsigned int gomodbus_PDURead_Quantity_Get(long long int handle);
extern void gomodbus_PDURead_Quantity_Set(long long int handle, short unsigned int val);
extern long long int gomodbus_PDURead_ToBytes(long long int _handle);
extern char* gomodbus_PDURead_FromBytes(long long int _handle, long long int data);

// --- wrapping struct: gomodbus.PDUWriteMultipleCoilsResponse ---
//
extern long long int gomodbus_PDUWriteMultipleCoilsResponse_CTor();
extern char gomodbus_PDUWriteMultipleCoilsResponse_FunctionCode_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleCoilsResponse_FunctionCode_Set(long long int handle, char val);
extern short unsigned int gomodbus_PDUWriteMultipleCoilsResponse_Address_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleCoilsResponse_Address_Set(long long int handle, short unsigned int val);
extern short unsigned int gomodbus_PDUWriteMultipleCoilsResponse_Quantity_Get(long long int handle);
extern void gomodbus_PDUWriteMultipleCoilsResponse_Quantity_Set(long long int handle, short unsigned int val);
extern long long int gomodbus_PDUWriteMultipleCoilsResponse_ToBytes(long long int _handle);
extern char* gomodbus_PDUWriteMultipleCoilsResponse_FromBytes(long long int _handle, long long int data);

// --- wrapping struct: gomodbus.PDUWriteSingleRegisterResponse ---
//
extern long long int gomodbus_PDUWriteSingleRegisterResponse_CTor();
extern char gomodbus_PDUWriteSingleRegisterResponse_FunctionCode_Get(long long int handle);
extern void gomodbus_PDUWriteSingleRegisterResponse_FunctionCode_Set(long long int handle, char val);
extern short unsigned int gomodbus_PDUWriteSingleRegisterResponse_Address_Get(long long int handle);
extern void gomodbus_PDUWriteSingleRegisterResponse_Address_Set(long long int handle, short unsigned int val);
extern long long int gomodbus_PDUWriteSingleRegisterResponse_Value_Get(long long int handle);
extern void gomodbus_PDUWriteSingleRegisterResponse_Value_Set(long long int handle, long long int val);
extern long long int gomodbus_PDUWriteSingleRegisterResponse_ToBytes(long long int _handle);
extern char* gomodbus_PDUWriteSingleRegisterResponse_FromBytes(long long int _handle, long long int data);

// --- wrapping struct: gomodbus.SerialADU ---
//
extern long long int gomodbus_SerialADU_CTor();
extern char gomodbus_SerialADU_UnitID_Get(long long int handle);
extern void gomodbus_SerialADU_UnitID_Set(long long int handle, char val);
extern long long int gomodbus_SerialADU_PDU_Get(long long int handle);
extern void gomodbus_SerialADU_PDU_Set(long long int handle, long long int val);
extern short unsigned int gomodbus_SerialADU_CRC_Get(long long int handle);
extern void gomodbus_SerialADU_CRC_Set(long long int handle, short unsigned int val);
extern long long int gomodbus_SerialADU_ToBytes(long long int _handle);
extern char* gomodbus_SerialADU_FromBytes(long long int _handle, long long int data);
extern long long int gomodbus_NewPDUErrorResponse(char functionCode, char exceptionCode);
extern long long int gomodbus_NewPDUWriteMultipleCoils(short unsigned int startingAddress, long long int values);
extern long long int gomodbus_NewWriteMultipleRegistersResponse(short unsigned int address, short unsigned int quantity);
extern long long int gomodbus_NewPDUWriteSingleRegister(short unsigned int registerAddress, long long int registerValue);
extern long long int gomodbus_NewPDUReadCoilsResponse(long long int coils);
extern long long int gomodbus_NewPDUReadDiscreteInputsResponse(long long int inputs);
extern long long int gomodbus_NewPDUReadHoldingRegistersResponse(long long int registers);
extern long long int gomodbus_NewPDUReadInputRegistersResponse(long long int registers);
extern long long int gomodbus_NewPDUWriteSingleCoil(short unsigned int address, char value);
extern long long int gomodbus_NewPDUWriteMultipleRegisters(short unsigned int startingAddress, short unsigned int quantity, long long int values);
extern long long int gomodbus_NewWriteSingleCoilResponse(short unsigned int address, char value);
extern long long int gomodbus_NewTCPADU(short unsigned int transactionID, char unitID, long long int pdu);
extern long long int gomodbus_NewPDUReadInputRegisters(short unsigned int startingAddress, short unsigned int quantity);
extern long long int gomodbus_NewPDUReadDiscreteInputs(short unsigned int startingAddress, short unsigned int quantity);
extern long long int gomodbus_NewPDUReadCoils(short unsigned int startingAddress, short unsigned int quantity);
extern long long int gomodbus_NewPDUReadHoldingRegisters(short unsigned int startingAddress, short unsigned int quantity);
extern long long int gomodbus_NewWriteMultipleCoilsResponse(short unsigned int address, short unsigned int quantity);
extern long long int gomodbus_NewWriteSingleRegisterResponse(short unsigned int address, long long int value);
extern long long int gomodbus_NewSerialADU(char address, long long int pdu);
extern long long int gomodbus_ReadDiscreteInputs(long long int c, char unitID, short unsigned int address, short unsigned int quantity);
extern long long int gomodbus_NewSerialClient(char* port, long long int baudRate, char dataBits, char parity, char stopBits);
extern long long int gomodbus_NewSerialServer(char* port, long long int baudRate, char dataBits, char parity, char stopBits);
extern long long int gomodbus_ReadInputRegisters(long long int c, char unitID, short unsigned int address, short unsigned int quantity);
extern char* gomodbus_DeleteCoils(long long int server, char unitID, long long int addresses);
extern long long int gomodbus_InitializeLogger();
extern long long int gomodbus_Serializer(char* data, char* byteOrder, char* wordOrder);
extern char* gomodbus_AddCoils(long long int server, char unitID, short unsigned int address, long long int values);
extern char* gomodbus_AddDiscreteInputs(long long int server, char unitID, short unsigned int address, long long int values);
extern char* gomodbus_WriteRegister(long long int c, char unitID, short unsigned int address, long long int value);
extern void gomodbus_EnableDebug(char goRun);
extern char* gomodbus_WriteCoil(long long int c, char unitID, short unsigned int address, char value);
extern long long int gomodbus_NewTCPServer(char* host, long int port, char useTLS, char* certFile, char* keyFile, char* caFile);
extern char* gomodbus_DeleteDiscreteInputs(long long int server, char unitID, long long int addresses);
extern long long int gomodbus_NewTCPClient(char* host, long long int port, char useTLS, char* certFile, char* keyFile, char* caFile);
extern char* gomodbus_WriteRegisters(long long int c, char unitID, short unsigned int address, short unsigned int quantity, long long int values);
extern char* gomodbus_AddInputRegisters(long long int server, char unitID, short unsigned int address, long long int values);
extern char* gomodbus_DeleteInputRegisters(long long int server, char unitID, long long int addresses);
extern long long int gomodbus_ReadCoils(long long int c, char unitID, short unsigned int address, short unsigned int quantity);
extern long long int gomodbus_ReadHoldingRegisters(long long int c, char unitID, short unsigned int address, short unsigned int quantity);
extern char* gomodbus_WriteCoils(long long int c, char unitID, short unsigned int address, long long int values);
extern char* gomodbus_AddHoldingRegisters(long long int server, char unitID, short unsigned int address, long long int values);
extern char* gomodbus_DeleteHoldingRegisters(long long int server, char unitID, long long int addresses);

#ifdef __cplusplus
}
#endif
